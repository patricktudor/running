tidytuesdayR::tt_available()
tuesdata <- tidytuesdayR::tt_load('2021-04-06')
forest <- tuesdata$forest
forest_area <- tuesdata$forest_area
brazil_loss <- tuesdata$brazil_loss
soybean_use <- tuesdata$soybean_use
vegetable_oil <- tuesdata$vegetable_oil
View(forest)
# visualising my running history
##############
### Set up ###
##############
# packages
library(tidyverse) # obviously
library(lubridate) # dates
library(ggpubr) # arranging ggplots
library(wesanderson) # nice colours
# set working directory
setwd("~/GitHub/running")
# read in activity summary data
activities <- read.csv("~/GitHub/running/running-data-exports/Strava/activities.csv")
#################################
### Prepare data for analysis ###
#################################
# create dataset focused on just runs
run_metrics <- activities %>%
# select columns of interest
select(Activity.ID, Activity.Date, Activity.Type, Elapsed.Time, Distance.1,
Moving.Time, Max.Speed, Elevation.Gain, Elevation.High, Max.Grade,
Max.Cadence, Average.Cadence) %>%
# rename columns because I don't like dots
rename(ActivityID = Activity.ID, ActivityDate = Activity.Date, ActivityType = Activity.Type,
ElapsedTime_s = Elapsed.Time, Distance_m = Distance.1, MovingTime_s = Moving.Time,
MaxSpeed = Max.Speed, Elevation = Elevation.Gain, ElevationMax = Elevation.High,
MaxGradient = Max.Grade, CadenceMax = Max.Cadence, CadenceAvg = Average.Cadence) %>%
# tidy up date field and create new versions of distance and elapsed time
mutate(ActivityDate = dmy_hms(ActivityDate),
Distance_km = Distance_m/1000,
ElapsedTime_m = ElapsedTime_s/60,
MovingTime_m = MovingTime_s/60,
Pace_minskm = MovingTime_m/Distance_km,
DaysSinceRun = ceiling(difftime(max(ActivityDate), ActivityDate, units = c("days"))),
YearsSinceRun = as.integer(floor(DaysSinceRun)/365)) %>%
# filter to just runs from 2016 onwards
filter(ActivityType == 'Run', year(ActivityDate) >= 2016)
# annual run statistics
annual_stats <- run_metrics %>%
mutate(Year = year(ActivityDate)) %>%
group_by(Year) %>%
summarise(Runs = n(),
TotalDistance = sum(Distance_km),
AvgDistance = mean(Distance_km, na.rm = TRUE),
MaxDistance = max(Distance_km),
TotalMovingTime_hrs = sum(MovingTime_m)/60,
AvgMovingTime = mean(MovingTime_m, na.rm = TRUE),
TotalElevation = sum(Elevation),
AvgElevation = mean(Elevation, na.rm = TRUE),
AvgPace = (TotalMovingTime_hrs/60)/TotalDistance,
AvgCadence = mean(CadenceAvg, na.rm = TRUE))
######################
### Visualisations ###
######################
### plot distance of runs per week by year
p1 <- ggplot(data = run_metrics, aes(x = week(ActivityDate), y = Distance_km, fill = as.factor(year(ActivityDate)))) +
geom_col() +
scale_fill_jco() + # ggsci palette
# scale_fill_manual(values = wes_palette("Darjeeling2", n = 5)) + # wesanderson palette
theme(legend.position = "none") +
labs(x = "Week of the year", y = "Running Distance (km)", title = "Weekly running distance by year") +
facet_wrap(~ year(ActivityDate), ncol = 2)
p1
### distribution of run distances
ggplot(data = run_metrics, aes(x = Distance_km)) +
geom_histogram(binwidth = 0.25) +
labs(x = "Distance (km)", y = "Runs", title = "Run distances")
# add wrap by year
p2 <- ggplot(data = run_metrics, aes(x = Distance_km, fill = as.factor(year(ActivityDate)))) +
geom_histogram(binwidth = 0.5) +
# lims(x = c(0, 30)) +
theme(legend.position = "none") +
labs(x = "Distance (km)", y = "Runs", title = "Run distances") +
facet_wrap(~ year(ActivityDate), ncol = 2)
### distribution of run pace
ggplot(data = run_metrics, aes(x = Pace_minskm)) +
geom_histogram(binwidth = 0.1) +
lims(x = c(3, 10)) +
labs(x = "Running pace (mins per km)", y = "Runs", title = "Run pace")
# add wrap by year
p3 <- ggplot(data = run_metrics, aes(x = Pace_minskm, group = year(ActivityDate), fill = as.factor(year(ActivityDate)))) +
geom_density(alpha = 0.3) +
lims(x = c(3, 10)) +
labs(x = "Running pace (mins per km)", y = "Runs", title = "Run pace", fill = "Year")
# try again as a boxplot
p4 <- ggplot(data = run_metrics, aes(x = year(ActivityDate), y = Pace_minskm, fill = as.factor(year(ActivityDate)))) +
geom_boxplot() +
lims(y = c(3, 12)) +
labs(x = "Year", y = "Running pace (mins per km)", title = "Run pace", fill = "Year")
p4
### add plots together ###
# This great article helped me with this bit
# http://www.sthda.com/english/articles/24-ggpubr-publication-ready-plots/81-ggplot2-easy-way-to-mix-multiple-graphs-on-the-same-page/
ggarrange(p1, p2, p3,
labels = c("A", "B", "C"),
ncol = 2, nrow = 2)
View(activities)
# tt wk 15 - deforestation
tidytuesdayR::tt_available()
# quote the date of the required dataset
# tuesdata will be a collection of one or more datasets
tuesdata <- tidytuesdayR::tt_load('2021-04-06')
forest <- tuesdata$forest
forest_area <- tuesdata$forest_area
brazil_loss <- tuesdata$brazil_loss
soybean_use <- tuesdata$soybean_use
vegetable_oil <- tuesdata$vegetable_oil
View(vegetable_oil)
View(forest)
View(forest_area)
View(forest)
View(brazil_loss)
View(tuesdata)
View(soybean_use)
View(forest_area)
install.packages("countrycode")
library(tidyverse)
library(countrycode)
forest$continent <- countrycode(sourcevar = forest[, "entity"],
origin = "country.name",
destination = "continent")
View(forest)
forest[, "entity"]
View(forest)
View(tuesdata)
forest <- data.frame(forest)
forest$continent <- countrycode(sourcevar = forest[, "entity"],
origin = "country.name",
destination = "continent")
View(forest)
tmp <- forest %>%
filter(net_forest_conversion != 0,
year = c(2000, 2015)) %>%
tmp <- forest %>%
filter(net_forest_conversion != 0,
year = c(2000, 2015))
tmp <- forest %>%
filter(net_forest_conversion != 0,
year = c(2000, 2015))
tmp <- forest %>%
filter(net_forest_conversion != 0,
year == c(2000, 2015))
View(tmp)
tmp <- forest %>%
filter(net_forest_conversion != 0,
year %in% c(2000, 2015))
View(tmp)
tmp <- forest %>%
filter(net_forest_conversion != 0,
year %in% c(2000, 2010, 2015)) %>%
pivot_wider(names_from = year, values_from = net_forest_conversion)
View(tmp)
View(forest_area)
forest_area <- data.frame(forest_area)
forest_area$continent <- countrycode(sourcevar = forest[, "entity"],
origin = "country.name",
destination = "continent")
tmp2 <- forest_area %>%
group_by(continent, year) %>%
summarise(continent_forest_area = sum(forest_area))
View(forest_area)
forest_area$continent <- countrycode(sourcevar = forest[, "entity"],
origin = "country.name",
destination = "continent")
forest_area$continent <- countrycode(sourcevar = forest_area[, "entity"],
origin = "country.name",
destination = "continent")
forest_area <- tuesdata$forest_area
tmp2 <- forest_area %>%
filter(entity %in% c('Africa', 'Asia', 'Europe', 'Northern America', 'Oceania', 'South America')) %>%
group_by(entity, year) %>%
summarise(continent_forest_area = sum(forest_area))
View(tmp2)
tmp <- forest_area %>%
filter(entity %in% c('Africa', 'Asia', 'Europe', 'Northern America', 'Oceania', 'South America'),
year %in% c(1990, 2000, 2010, 2020)) %>%
group_by(entity, year) %>%
summarise(continent_forest_area = sum(forest_area))
View(forest_area)
ggplot(data = tmp, aes(x = year, y = continent_forest_area, colour = entity)) +
geom_line()
tmp2 <- forest %>%
left_join(forest_area)
View(tmp2)
forest_area %>%
filter(entity %in% c('Africa', 'Asia', 'Europe', 'Northern America', 'Oceania', 'South America'),
year %in% c(1990, 2000, 2010, 2020)) %>%
group_by(entity, year) %>%
summarise(continent_forest_area = sum(forest_area)) %>%
# plot
ggplot(aes(x = year, y = continent_forest_area, colour = entity)) +
geom_line()
View(forest)
View(tmp2)
tmp2 <- forest %>%
left_join(forest_area) %>%
pivot_wider(names_from = year, values_from = net_forest_conversion)
View(tmp2)
tmp2 <- forest %>%
pivot_wider(names_from = year, values_from = net_forest_conversion)
View(tmp2)
tmp2 <- forest %>%
pivot_wider(names_from = year, names_glue = "Year_{year}" values_from = net_forest_conversion)
tmp2 <- forest %>%
pivot_wider(names_from = year, names_glue = "Year_{year}", values_from = net_forest_conversion)
View(tmp2)
tmp2 <- forest %>%
pivot_wider(names_from = year,
names_glue = "Year_{year}",
values_from = net_forest_conversion) %>%
mutate(change_rate_1900_2000 = Year_2000 - Year_1990,
change_rate_2000_2010 = Year_2010 - Year_2000,
change_rate_2010_2015 = Year_2015 - Year_2010)
View(tmp2)
tmp2 <- forest %>%
filter(!is.na(continent)) %>%
pivot_wider(names_from = year,
names_glue = "Year_{year}",
values_from = net_forest_conversion) %>%
mutate(change_rate_1900_2000 = Year_2000 - Year_1990,
change_rate_2000_2010 = Year_2010 - Year_2000,
change_rate_2010_2015 = Year_2015 - Year_2010)
View(tmp2)
